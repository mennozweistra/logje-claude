# ─── Build Stage ───────────────────────────────────────────────
FROM node:22 as node-builder

WORKDIR /app

# Copy only what's needed for asset build
COPY package.json package-lock.json* vite.config.js tailwind.config.js postcss.config.js /app/
RUN npm install

COPY resources/ /app/resources/
COPY public/ /app/public/
RUN npm run build

# Verify build output exists
RUN ls -la /app/public/build/ && test -f /app/public/build/manifest.json


# ─── Composer Stage ─────────────────────────────────────────────
FROM composer:2 as composer-builder
WORKDIR /app
COPY composer.json composer.lock /app/
RUN composer install --no-dev --optimize-autoloader --no-scripts --no-progress --prefer-dist


# ─── Final PHP-Apache Image ────────────────────────────────────
FROM php:8.3-apache

# Install PHP extensions and essential packages only
RUN apt-get update && apt-get install -y \
    libonig-dev \
    libzip-dev \
    default-mysql-client \
    unzip \
    curl \
    && docker-php-ext-install pdo_mysql mbstring zip \
    && rm -rf /var/lib/apt/lists/*

# Enable mod_rewrite for Laravel routing
RUN a2enmod rewrite

# Set secure Apache document root
ENV APACHE_DOCUMENT_ROOT /var/www/html/public
RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf && \
    sed -ri -e 's!/var/www/!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf

# Copy app source
WORKDIR /var/www/html
COPY . /var/www/html

# Copy built assets from node stage (ensure build directory is included)
COPY --from=node-builder /app/public/build/ /var/www/html/public/build/

# Verify assets were copied correctly
RUN ls -la /var/www/html/public/build/ && test -f /var/www/html/public/build/manifest.json

# Copy vendor from composer stage
COPY --from=composer-builder /app/vendor/ /var/www/html/vendor/

# Set permissions (adjust if using volumes)
RUN chown -R www-data:www-data storage bootstrap/cache && \
    chmod -R 775 storage bootstrap/cache

# Secure Apache: block access to .env, .git, etc.
RUN echo "<FilesMatch \"^\.\">\nRequire all denied\n</FilesMatch>" > /etc/apache2/conf-available/hardening.conf && \
    a2enconf hardening

# Startup script: cache config if APP_KEY is set
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Starting Apache..."\n\
if [ -n "$APP_KEY" ]; then\n\
    echo "Caching config..."\n\
    php artisan config:cache\n\
    php artisan route:cache || true\n\
fi\n\
exec apache2-foreground' > /usr/local/bin/start.sh && chmod +x /usr/local/bin/start.sh

# Add healthcheck (optional)
HEALTHCHECK CMD curl --fail http://localhost || exit 1

EXPOSE 80
CMD ["/usr/local/bin/start.sh"]